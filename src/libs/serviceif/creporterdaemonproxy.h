/*
 * This file is part of crash-reporter
 *
 * Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * Contact: Ville Ilvonen <ville.p.ilvonen@nokia.com>
 * Author: Riku Halonen <riku.halonen@nokia.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 *
 */

/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c CReporterDaemonProxy -p creporterdaemonproxy.h:creporterdaemonproxy.cpp com.nokia.CrashReporter.Daemon.xml -N
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CREPORTERDAEMONPROXY_H_1271742919
#define CREPORTERDAEMONPROXY_H_1271742919

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

// HAND-EDIT
#include "creporterexport.h"

/*
 * Proxy class for interface com.nokia.CrashReporter.Daemon
 */
class CREPORTER_EXPORT CReporterDaemonProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.nokia.CrashReporter.Daemon"; }

public:
    CReporterDaemonProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~CReporterDaemonProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QStringList> getAllCoreFiles()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("getAllCoreFiles"), argumentList);
    }

    inline QDBusPendingReply<> startCoreMonitoring()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("startCoreMonitoring"), argumentList);
    }

    inline QDBusPendingReply<> stopCoreMonitoring()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("stopCoreMonitoring"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
